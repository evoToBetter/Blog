(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{523:function(e,n,t){"use strict";t.r(n);var a=t(4),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[e._v("深入了解java中对对象的clone")])]),e._v(" "),t("h2",{attrs:{id:"浅复制shallow-copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅复制shallow-copy"}},[e._v("#")]),e._v(" 浅复制shallow copy")]),e._v(" "),t("p",[e._v("实现"),t("code",[e._v("Cloneable")]),e._v("接口，那么其实现的就是浅复制。"),t("br"),e._v("\n存在的问题，就是仅仅复制了该对象的属性，而没有针对属性中的引用进行复制，导致复制前后两个对象属性中引用的是相同地址。如")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class Dog implements Cloneable {\n    public final List<String> names=new ArrayList<>();\n    public List<String> nicknames =new ArrayList<>();\n    public int age;\n    public int weight;\n\n    public Dog clone(){\n        try{\n            return (Dog)super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            throw new Error("Is too");\n        }\n    }\n}\n')])])]),t("p",[e._v("我们对其进行复制"),t("code",[e._v("Dog bobBarker=bowser.clone();")]),e._v("，得到的对象和bowser的names和nicknames都是相同的。导致向names或者nicknames里写入内容会同时出现在两个对象中。"),t("br"),e._v("\n尤其是names，其被标记为final，我们不能使用其他方法在复制的时候对其赋值，重新初始化names为一个新的list。"),t("br"),e._v("\n这是我们在使用cloneable接口的时候需要注意这些限制。"),t("br"),e._v("\nclone其实我们就可以看做是一个额外的构造器，其进行克隆的时候不应该会有影响原有对象的行为。"),t("br"),e._v("\n为了完全复制一个对象，我们就需要使用深复制。"),t("br"),e._v("\n并且实现了cloneable接口，还需要注意使其在多线程中的线程安全问题。"),t("br"),e._v("\n另外一个实现复制的办法是，复制构造器或者复制工厂方法。")]),e._v(" "),t("h2",{attrs:{id:"深度复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度复制"}},[e._v("#")]),e._v(" 深度复制")]),e._v(" "),t("p",[e._v("实现深度复制的主要思路为使用序列化实现。"),t("br"),e._v("\n示例代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public static Object deepCopy(Object oldObject) throws IOException, ClassNotFoundException {\n        ObjectOutputStream oos=null;\n        ObjectInputStream ois=null;\n        try{\n            ByteArrayOutputStream bos=new ByteArrayOutputStream();\n            oos=new ObjectOutputStream(bos);\n            oos.writeObject(oldObject);\n            oos.flush();\n            ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());\n            ois=new ObjectInputStream(bis);\n            return ois.readObject();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        }finally {\n            if(oos!=null){\n                oos.close();\n            }\n            if(ois!=null){\n                ois.close();\n            }\n        }\n    }\n")])])]),t("p",[e._v("被序列化的对象需要实现Serializable接口。"),t("br"),e._v("\n参考代码地址："),t("a",{attrs:{href:"https://github.com/evoToBetter/java_practice/tree/master/src/main/java/evotobetter/clone",target:"_blank",rel:"noopener noreferrer"}},[e._v("java copy practice"),t("OutboundLink")],1),t("br"),e._v("\n第三方工具：")]),e._v(" "),t("ol",[t("li",[e._v("Apache提供的SerializationUtils.clone(T)")]),e._v(" "),t("li",[e._v("GSON/Jackson的json序列化反序列化")]),e._v(" "),t("li",[e._v("apache的BeanUtils")]),e._v(" "),t("li",[e._v("CGLIB的beancopier，据说性能比BeanUtils好。")])]),e._v(" "),t("h2",{attrs:{id:"apache-beanutils与cglib-beancopier对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apache-beanutils与cglib-beancopier对比"}},[e._v("#")]),e._v(" Apache BeanUtils与cglib BeanCopier对比")]),e._v(" "),t("p",[e._v("前期准备："),t("br"),e._v("\n使用版本：commons-beanutils 1.9.4，cglib 3.3.0"),t("br"),e._v("\n两个数据类+一个准备数据的工具类：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private LocalDateTime gmtBoth;\n    private BigDecimal balance;\n\n    public User() {\n    }\n\n    public User(Integer id, String name, Integer age, LocalDateTime gmtBoth, BigDecimal balance) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n        this.gmtBoth = gmtBoth;\n        this.balance = balance;\n    }\n\n    public LocalDateTime getGmtBoth() {\n        return gmtBoth;\n    }\n\n    public void setGmtBoth(LocalDateTime gmtBoth) {\n        this.gmtBoth = gmtBoth;\n    }\n\n    public BigDecimal getBalance() {\n        return balance;\n    }\n\n    public void setBalance(BigDecimal balance) {\n        this.balance = balance;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return "User{" +\n                "id=" + id +\n                ", name=\'" + name + \'\\\'\' +\n                ", age=" + age +\n                ", gmtBoth=" + gmtBoth +\n                ", balance=" + balance +\n                \'}\';\n    }\n}\n\npublic class NormalUser {\n    private int id;\n    private String name;\n    private int age;\n    private String gmtBoth;\n    private String balance;\n\n    public NormalUser() {\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getGmtBoth() {\n        return gmtBoth;\n    }\n\n    public void setGmtBoth(String gmtBoth) {\n        this.gmtBoth = gmtBoth;\n    }\n\n    public String getBalance() {\n        return balance;\n    }\n\n    public void setBalance(String balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public String toString() {\n        return "NormalUser{" +\n                "id=" + id +\n                ", name=\'" + name + \'\\\'\' +\n                ", age=" + age +\n                ", gmtBoth=\'" + gmtBoth + \'\\\'\' +\n                ", balance=\'" + balance + \'\\\'\' +\n                \'}\';\n    }\n}\n\npublic class DataUtil {\n\n    public static User createData(int index){\n        return new User(index,"vUser"+index,index*10, LocalDateTime.now(),new BigDecimal(index*10));\n    }\n\n    public static List<User> createDataList(int size){\n        List<User> users=new ArrayList<>();\n        for(int i=0; i<size; i++){\n            users.add(createData(i));\n        }\n        return users;\n    }\n}\n')])])]),t("p",[e._v("BeanUtils使用实例,直接转换,但是注意需要处理可能的异常：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    @Test\n    public void testCopyBeanByBeanUtilsForDifferentClass() throws InvocationTargetException, IllegalAccessException {\n\n        User user = DataUtil.createData(1);\n        logger.info("Before copy: {}", user);\n        NormalUser user1 = new NormalUser();\n        BeanUtils.copyProperties(user1, user);\n        logger.info("After copy: {}", user1);\n    }\n')])])]),t("p",[e._v("BeanCopier实例,由于两个类直接有属性不同，需要转换类来辅助转换：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class UserConverter implements Converter {\n\n    DateTimeFormatter dtf=DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");\n\n    @Override\n    public Object convert(Object value, Class target, Object context) {\n        if(value instanceof Integer){\n            return ((Integer) value).intValue();\n        }else if(value instanceof LocalDateTime){\n            return dtf.format((LocalDateTime)value);\n        }else if(value instanceof BigDecimal){\n            return ((BigDecimal) value).toPlainString();\n        }\n        return value;\n    }\n}\n    @Test\n    public void testCopyWithConverter() {\n        String generatedCodePath = "target/generated-sources";\n        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, generatedCodePath);\n        User user = DataUtil.createData(1);\n        logger.info("Before copy: {}", user);\n        BeanCopier beanCopier = BeanCopier.create(User.class, NormalUser.class, true);\n        NormalUser user1 = new NormalUser();\n        beanCopier.copy(user, user1, new UserConverter());\n        logger.info("After copy: {}", user1);\n    }\n')])])]),t("p",[e._v("BeanUtils是基于反射来实现的，而BeanCopier则是基于修改字节码实现的。"),t("br"),e._v("\n如果想要查看字节码的话，可以在JVM参数里设置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String generatedCodePath = "target/generated-sources";\n        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, generatedCodePath);\n')])])]),t("p",[e._v("查看生成的类，会有两个类，第一个名字如"),t("code",[e._v("Object$$BeanCopierByCGLIB$$62379102")]),e._v(",第二个名字如"),t("code",[e._v("BeanCopier$BeanCopierKey$$KeyFactoryByCGLIB$$f32401fd")]),e._v("。"),t("br"),e._v("\n第一个类为转换类，其中包含了如何拷贝：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void copy(Object var1, Object var2, Converter var3) {\n        NormalUser var4 = (NormalUser)var2;\n        User var5 = (User)var1;\n        Object var10001 = var3.convert(var5.getAge(), Integer.TYPE, "setAge");\n        var4.setAge(var10001 == null ? 0 : ((Number)var10001).intValue());\n        var4.setGmtBoth((String)var3.convert(var5.getGmtBoth(), CGLIB$load_class$java$2Elang$2EString, "setGmtBoth"));\n        var10001 = var3.convert(var5.getId(), Integer.TYPE, "setId");\n        var4.setId(var10001 == null ? 0 : ((Number)var10001).intValue());\n        var4.setName((String)var3.convert(var5.getName(), CGLIB$load_class$java$2Elang$2EString, "setName"));\n    }\n')])])]),t("p",[e._v("第二个是用于获取转换类的一个工厂类。"),t("br"),e._v("\nBeanCopier准备好转换类后，直接调用转换类的copy方法就可以完成复制了。"),t("br"),e._v("\n具体cglib的实现可以参考："),t("a",{attrs:{href:"https://www.jianshu.com/p/f8b892e08d26",target:"_blank",rel:"noopener noreferrer"}},[e._v("cglib beanCopier 源码实现"),t("OutboundLink")],1),t("br"),e._v("\n测试示例代码可以参考我的"),t("a",{attrs:{href:"https://github.com/evoToBetter/java_practice/blob/master/src/test/evotobetter/clone/BeanCopyUtilTest.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("code repo"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"http://www.xenoveritas.org/blog/xeno/java_copy_constructors_and_clone",target:"_blank",rel:"noopener noreferrer"}},[e._v("java copy constructors and clone"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.amazon.cn/dp/0134685997",target:"_blank",rel:"noopener noreferrer"}},[e._v("effective java"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://houbb.github.io/2019/01/09/java-deep-copy",target:"_blank",rel:"noopener noreferrer"}},[e._v("java 浅拷贝，深度拷贝与属性复制"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5dc2b293e51d456e65283e61",target:"_blank",rel:"noopener noreferrer"}},[e._v("BeanUtils与BeanCopier对比"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://yq.aliyun.com/articles/695290",target:"_blank",rel:"noopener noreferrer"}},[e._v("cglib bean copy介绍"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/f8b892e08d26",target:"_blank",rel:"noopener noreferrer"}},[e._v("cglib beanCopier 源码实现"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=r.exports}}]);