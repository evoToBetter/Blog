(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{487:function(t,e,r){t.exports=r.p+"assets/img/docker-cover-picture-1024x599@2x.7cc11a84.jpg"},488:function(t,e,r){t.exports=r.p+"assets/img/k8s_master_structure.33d5951e.png"},489:function(t,e,r){t.exports=r.p+"assets/img/k8s_structure.5c9fe500.png"},490:function(t,e,r){t.exports=r.p+"assets/img/docker-filesystems-multilayer.8598113d.png"},491:function(t,e,r){t.exports=r.p+"assets/img/CNI.2a9f1197.png"},492:function(t,e,r){t.exports=r.p+"assets/img/k8s_CNI_plugin.080daccd.png"},543:function(t,e,r){"use strict";r.r(e);var a=r(4),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("关于k8s的基础知识介绍")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(487),alt:"lego-docker"}})]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#k8s%E5%9F%BA%E7%A1%80"}},[t._v("k8s基础")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#k8s%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"}},[t._v("k8s核心概念")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"}},[t._v("核心功能")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D"}},[t._v("功能介绍")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s%E4%B8%BB%E8%A6%81%E6%9E%B6%E6%9E%84"}},[t._v("k8s主要架构")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#k8s-master%E6%9E%B6%E6%9E%84"}},[t._v("k8s master架构")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s%E6%9E%B6%E6%9E%84"}},[t._v("k8s架构")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s%E5%AE%B9%E5%99%A8%E6%A6%82%E5%BF%B5"}},[t._v("k8s容器概念")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86"}},[t._v("进程管理")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AE%B9%E5%99%A8%E6%A6%82%E5%BF%B5"}},[t._v("容器概念")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E9%95%9C%E5%83%8F"}},[t._v("镜像")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AE%B9%E5%99%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"}},[t._v("容器的生命周期")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s-cricontainer-runtime-interface"}},[t._v("k8s CRI(Container Runtime Interface)")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#pod%E6%A6%82%E5%BF%B5"}},[t._v("pod概念")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#pod%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B"}},[t._v("pod网络模型")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#kube-proxy%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F"}},[t._v("kube-proxy代理模式")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#userspace%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F"}},[t._v("userspace代理模式")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#iptables%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F"}},[t._v("iptables代理模式")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#ipvs%E6%A8%A1%E5%BC%8F"}},[t._v("IPVS模式")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s-deployment"}},[t._v("k8s deployment")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#k8s-deployment-app-types"}},[t._v("k8s deployment app types")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s-deployment-update-strategy"}},[t._v("k8s deployment update strategy")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s-services%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%B1%BB%E5%9E%8B"}},[t._v("k8s services(发布服务的类型)")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#clusterip"}},[t._v("clusterIP")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#nodeport"}},[t._v("NodePort")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#loadbalancer"}},[t._v("LoadBalancer")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#externalname"}},[t._v("ExternalName")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#helm"}},[t._v("helm")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#operator"}},[t._v("operator")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s-cnicontainer-network-interface"}},[t._v("k8s CNI(Container Network Interface)")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#k8s%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8cni"}},[t._v("k8s如何调用CNI")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#cni%E6%8F%92%E4%BB%B6"}},[t._v("CNI插件")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#calico-%E6%8F%92%E4%BB%B6"}},[t._v("calico 插件")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s%E5%88%9B%E5%BB%BA%E5%B7%A5%E5%85%B7---kubeadm"}},[t._v("k8s创建工具---kubeadm")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#service-account"}},[t._v("service account")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#service-account-admission-controller"}},[t._v("service account admission controller")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#token-controller"}},[t._v("Token controller")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#service-account-controller"}},[t._v("Service Account Controller")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#k8s%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84"}},[t._v("k8s日志架构")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%8A%82%E7%82%B9%E7%BA%A7%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84"}},[t._v("节点级日志架构")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97"}},[t._v("容器日志")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E6%97%A5%E5%BF%97"}},[t._v("系统组件日志")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E9%9B%86%E7%BE%A4%E7%BA%A7%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84"}},[t._v("集群级日志架构")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#ref%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"}},[t._v("ref参考链接")])])]),t._v(" "),a("h2",{attrs:{id:"k8s基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s基础"}},[t._v("#")]),t._v(" k8s基础")]),t._v(" "),a("h3",{attrs:{id:"k8s核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s核心概念"}},[t._v("#")]),t._v(" k8s核心概念")]),t._v(" "),a("p",[t._v("k8s是一个自动化的容器编排平台。")]),t._v(" "),a("h4",{attrs:{id:"核心功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心功能"}},[t._v("#")]),t._v(" 核心功能")]),t._v(" "),a("ul",[a("li",[t._v("服务的发现与均衡")]),t._v(" "),a("li",[t._v("容器的自动装箱（或者叫scheduling），将容器与存储连接")]),t._v(" "),a("li",[t._v("服务的自动恢复")]),t._v(" "),a("li",[t._v("服务的自动发现与回滚")]),t._v(" "),a("li",[t._v("执行job")]),t._v(" "),a("li",[t._v("弹性伸缩")])]),t._v(" "),a("h4",{attrs:{id:"功能介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能介绍"}},[t._v("#")]),t._v(" 功能介绍")]),t._v(" "),a("ul",[a("li",[t._v("调度"),a("br"),t._v("\n观察容器的大小、规格，调度到空闲的机器。")]),t._v(" "),a("li",[t._v("自愈\n节点健康检查，容器的自动迁移，实现集群内容器的自恢复。")]),t._v(" "),a("li",[t._v("水平伸缩"),a("br"),t._v("\n自动化扩展，自动控制应用副本数")])]),t._v(" "),a("h3",{attrs:{id:"k8s主要架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s主要架构"}},[t._v("#")]),t._v(" k8s主要架构")]),t._v(" "),a("p",[t._v("k8s架构是一个典型的二层架构和server-client架构。"),a("br"),t._v("\n用户侧的所有请求都只会与master交互，由master下发给node节点。")]),t._v(" "),a("h4",{attrs:{id:"k8s-master架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-master架构"}},[t._v("#")]),t._v(" k8s master架构")]),t._v(" "),a("p",[a("img",{attrs:{src:r(488),alt:"k8s_master"}})]),t._v(" "),a("p",[t._v("k8s的master主要包含四个组件：")]),t._v(" "),a("ul",[a("li",[t._v("API server\nk8s所有组件都会和API server连接，而不会组件间独立连接。本身可以水平扩展。")]),t._v(" "),a("li",[t._v("controller\n对集群状态进行管理，执行容器的修复、扩展等")]),t._v(" "),a("li",[t._v("Scheduler\n调度器，进行容器的调度管理")]),t._v(" "),a("li",[t._v("etcd\n分布式存储系统，本身为高可用组件，保证整个系统的高可用。")])]),t._v(" "),a("h4",{attrs:{id:"k8s架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s架构"}},[t._v("#")]),t._v(" k8s架构")]),t._v(" "),a("p",[a("img",{attrs:{src:r(489),alt:"k8s_structure"}})]),t._v(" "),a("ul",[a("li",[t._v("node 运行负载的主机")]),t._v(" "),a("li",[t._v("pod，运行pod的组件为kubelet。k8s不直接操作网络存储，而是通过插件来完成，比如storage plugin或者network plugin。"),a("br"),t._v("\n最小的一个调度单元，有一个或多个容器组成，定义容器的运行方式，提供容器共享的运行环境。")]),t._v(" "),a("li",[t._v("kube-proxy，利用iptable的能力组件k8s的network。"),a("br"),t._v(" "),a("strong",[t._v("k8s内部抽象概念")])]),t._v(" "),a("li",[t._v("volume，用来管理容器的存储，本身为一个抽象概念，支持多种后端存储。支持本地存储，支持分布式存储，像ceph，GlusterFS等，或者云盘等。")]),t._v(" "),a("li",[t._v("deployment，定义pod的副本数，pod的版本等，通过控制器控制pod的数目，以及pod的版本控制策略等，滚动升级、回滚等。")]),t._v(" "),a("li",[t._v("service，提供一个多个pod实例的稳定访问地址。支持clusterIP，也支持nodePort、LoadBalancer等。")]),t._v(" "),a("li",[t._v("namespace，集群内部逻辑隔离。")])]),t._v(" "),a("h3",{attrs:{id:"k8s容器概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s容器概念"}},[t._v("#")]),t._v(" k8s容器概念")]),t._v(" "),a("h4",{attrs:{id:"进程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[t._v("#")]),t._v(" 进程管理")]),t._v(" "),a("p",[t._v("操作系统管理进程：")]),t._v(" "),a("ol",[a("li",[t._v("进程可以相互看到，相互通信。")]),t._v(" "),a("li",[t._v("使用同一个文件系统，可以对同一个文件进行读写操作")]),t._v(" "),a("li",[t._v("进程会使用相同的系统资源\n这些特点带来的问题：")])]),t._v(" "),a("ul",[a("li",[t._v("进程可以相互看到且通信，高权限的进程可以攻击其他进程")]),t._v(" "),a("li",[t._v("同一时间操作文件会导致冲突和错误")]),t._v(" "),a("li",[t._v("应用之间资源抢占，导致应用无法正常提供服务。"),a("br"),t._v("\n针对上述的上个问题，如何提供独立的运行环境：")]),t._v(" "),a("li",[t._v("通过chroot系统调用将子目录变成根目录，达到视图级别的隔离。进程在chroot的帮助下可以具有独立的文件系统，对于这样的文件系统进行增删改查不会影响到其他进程。")]),t._v(" "),a("li",[t._v("通过namespace技术实现进程在资源的视图上进行隔离。")]),t._v(" "),a("li",[t._v("通过Cgroup来限制资源使用率，设置其能够使用的CPU以及内存量。")])]),t._v(" "),a("h4",{attrs:{id:"容器概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器概念"}},[t._v("#")]),t._v(" 容器概念")]),t._v(" "),a("p",[t._v("其实容器就是这样一个视图隔离、资源可限制、独立文件系统的进程集合。"),a("br"),t._v("\n容器具有一个独立的文件系统，使用系统的资源，所以独立文件系统内不需要具备内核相关代码或者工具。只需要提供容器所需的二进制文件、配置文件及依赖即可。")]),t._v(" "),a("h4",{attrs:{id:"镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[t._v("#")]),t._v(" 镜像")]),t._v(" "),a("p",[t._v("Dockfile描述了构建镜像的每个步骤，每个步骤描述了我们对文件进行的操作，文件所发生的变化集合被称为changeset。"),a("br"),t._v(" "),a("img",{attrs:{src:r(490),alt:""}}),t._v("\nchangeset可以进行分层和复用，从而提高了效率，节省了空间：")]),t._v(" "),a("ol",[a("li",[t._v("提高分发效率，下载镜像时，只需要下载本地没有change。")]),t._v(" "),a("li",[t._v("数据共享，节省了本地的存储空间。")])]),t._v(" "),a("h4",{attrs:{id:"容器的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器的生命周期"}},[t._v("#")]),t._v(" 容器的生命周期")]),t._v(" "),a("p",[t._v("docker run的时候会选择一个镜像来提供独立的文件系统并制定相应的运行程序。这里的程序称为initial进程，其启动时容器随之启动，其退出时，容器结束。")]),t._v(" "),a("h3",{attrs:{id:"k8s-cri-container-runtime-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-cri-container-runtime-interface"}},[t._v("#")]),t._v(" k8s CRI(Container Runtime Interface)")]),t._v(" "),a("p",[t._v("CRI为容器的运行时，CRI的通信协议为gRPC。负责处理镜像管理、容器生命周期管理、容器接口（exec，log，attach，ports）等。"),a("br"),t._v("\nCRI描述了kubelet期望的容器运行时行为。"),a("br"),t._v("\nCRI stream接口用来在容器内部执行一个命令。"),a("br"),t._v("\nCRI的实现有docker-shim（垫片程序）、containerd、CRI-O、Rocket、Frakti等。"),a("br"),t._v("\n额外介绍："),a("br"),t._v("\ndocker-containerd：高性能容器运行时，管控容器的daemon"),a("br"),t._v("\ndocker-runc：运行容器的命令工具"),a("br"),t._v("\ndocker-container-shim：垫片程序，将containerd和真实的容器进程解耦。\ndocker-init：容器内的1号进程，作为其他进程的父进程。\ndocker-proxy：网络代理，底层使用iptables实现。")]),t._v(" "),a("h3",{attrs:{id:"pod概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod概念"}},[t._v("#")]),t._v(" pod概念")]),t._v(" "),a("p",[t._v("pod的可以理解为多个linux命名空间的联合")]),t._v(" "),a("ul",[a("li",[t._v("pid命名空间（同一个pod中进程可以互相看到）")]),t._v(" "),a("li",[t._v("网络命名空间（同一个pod的应用对相同的ip和端口有权限）")]),t._v(" "),a("li",[t._v("IPC命名空间（同一个pod中的应用可以通过VPC或者POSIX进行通信）")]),t._v(" "),a("li",[t._v("UTS命名空间（同一个pod中的应用共享一个主机名称）")])]),t._v(" "),a("h3",{attrs:{id:"pod网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod网络模型"}},[t._v("#")]),t._v(" pod网络模型")]),t._v(" "),a("h3",{attrs:{id:"kube-proxy代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy代理模式"}},[t._v("#")]),t._v(" kube-proxy代理模式")]),t._v(" "),a("h4",{attrs:{id:"userspace代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#userspace代理模式"}},[t._v("#")]),t._v(" userspace代理模式")]),t._v(" "),a("p",[t._v("这种模式，kube-proxy 会监视 Kubernetes 主控节点对 Service 对象和 Endpoints 对象的添加和移除操作。 对每个 Service，它会在本地 Node 上打开一个端口（随机选择）。 任何连接到“代理端口”的请求，都会被代理到 Service 的后端 Pods 中的某个上面（如 Endpoints 所报告的一样）。 使用哪个后端 Pod，是 kube-proxy 基于 SessionAffinity 来确定的。"),a("br"),t._v("\n最后，它配置 iptables 规则，捕获到达该 Service 的 clusterIP（是虚拟 IP） 和 Port 的请求，并重定向到代理端口，代理端口再代理请求到后端Pod。"),a("br"),t._v("\n默认情况下，用户空间模式下的 kube-proxy 通过轮转算法选择后端。")]),t._v(" "),a("h4",{attrs:{id:"iptables代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iptables代理模式"}},[t._v("#")]),t._v(" iptables代理模式")]),t._v(" "),a("p",[t._v("这种模式，kube-proxy 会监视 Kubernetes 控制节点对 Service 对象和 Endpoints 对象的添加和移除。 对每个 Service，它会配置 iptables 规则，从而捕获到达该 Service 的 clusterIP 和端口的请求，进而将请求重定向到 Service 的一组后端中的某个 Pod 上面。 对于每个 Endpoints 对象，它也会配置 iptables 规则，这个规则会选择一个后端组合。")]),t._v(" "),a("p",[t._v("默认的策略是，kube-proxy 在 iptables 模式下随机选择一个后端。")]),t._v(" "),a("p",[t._v("使用 iptables 处理流量具有较低的系统开销，因为流量由 Linux netfilter 处理， 而无需在用户空间和内核空间之间切换。 这种方法也可能更可靠。")]),t._v(" "),a("p",[t._v("如果 kube-proxy 在 iptables 模式下运行，并且所选的第一个 Pod 没有响应， 则连接失败。 这与用户空间模式不同：在这种情况下，kube-proxy 将检测到与第一个 Pod 的连接已失败， 并会自动使用其他后端 Pod 重试。")]),t._v(" "),a("p",[t._v("你可以使用 Pod 就绪探测器 验证后端 Pod 可以正常工作，以便 iptables 模式下的 kube-proxy 仅看到测试正常的后端。 这样做意味着你避免将流量通过 kube-proxy 发送到已知已失败的 Pod。")]),t._v(" "),a("h4",{attrs:{id:"ipvs模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipvs模式"}},[t._v("#")]),t._v(" IPVS模式")]),t._v(" "),a("p",[t._v("在 ipvs 模式下，kube-proxy监视Kubernetes服务和端点，调用 netlink 接口相应地创建 IPVS 规则， 并定期将 IPVS 规则与 Kubernetes 服务和端点同步。 该控制循环可确保IPVS 状态与所需状态匹配。访问服务时，IPVS 将流量定向到后端Pod之一。")]),t._v(" "),a("p",[t._v("IPVS代理模式基于类似于 iptables 模式的 netfilter 挂钩函数， 但是使用哈希表作为基础数据结构，并且在内核空间中工作。 这意味着，与 iptables 模式下的 kube-proxy 相比，IPVS 模式下的 kube-proxy 重定向通信的延迟要短，并且在同步代理规则时具有更好的性能。 与其他代理模式相比，IPVS 模式还支持更高的网络流量吞吐量。")]),t._v(" "),a("h3",{attrs:{id:"k8s-deployment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-deployment"}},[t._v("#")]),t._v(" k8s deployment")]),t._v(" "),a("h4",{attrs:{id:"k8s-deployment-app-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-deployment-app-types"}},[t._v("#")]),t._v(" k8s deployment app types")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Workload")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Designed for")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Example")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Deployment")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Cloud native app")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Web, API")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("StatefulSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Stateful app")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Zookeeper, Kafka, SQL, NoSQL")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("DaemonSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Agent app")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("kube-proxy,CNI agent")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Job")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Batch app")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Scanners")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CronJob")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Recurring tasks")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Cleanup,backup")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ReplicationController")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Lagecy, not to use")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Static Pods")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('"undercloud" app')]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Image registry")])])])]),t._v(" "),a("h4",{attrs:{id:"k8s-deployment-update-strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-deployment-update-strategy"}},[t._v("#")]),t._v(" k8s deployment update strategy")]),t._v(" "),a("ol",[a("li",[t._v("Recreate\n通过设定strategy来实现")]),t._v(" "),a("li",[t._v("RollingUpdate\n通过k8s的rollout功能实现")]),t._v(" "),a("li",[t._v("Blue/Green\n流量要么在A，要么在B，通过loadbalancer实现")]),t._v(" "),a("li",[t._v("Canary\n金丝雀方式，通过ingress控制器实现")]),t._v(" "),a("li",[t._v("A/B Testing\n通过ingress控制器实现")])]),t._v(" "),a("h3",{attrs:{id:"k8s-services-发布服务的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-services-发布服务的类型"}},[t._v("#")]),t._v(" k8s services(发布服务的类型)")]),t._v(" "),a("h4",{attrs:{id:"clusterip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clusterip"}},[t._v("#")]),t._v(" clusterIP")]),t._v(" "),a("p",[t._v("通过集群内部IP（VIP）暴露服务，该服务只能集群内访问。")]),t._v(" "),a("h4",{attrs:{id:"nodeport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodeport"}},[t._v("#")]),t._v(" NodePort")]),t._v(" "),a("p",[t._v("通过节点IP及静态端口暴露服务，会路由到自动创建的ClusterIP服务。包含clusterIP。")]),t._v(" "),a("h4",{attrs:{id:"loadbalancer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancer"}},[t._v("#")]),t._v(" LoadBalancer")]),t._v(" "),a("p",[t._v("使用负载均衡器对外暴露服务。包含clusterIP和nodePort。")]),t._v(" "),a("h4",{attrs:{id:"externalname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#externalname"}},[t._v("#")]),t._v(" ExternalName")]),t._v(" "),a("p",[t._v("通过返回CNAM和对应值，将服务映射到externalname字段的内容。")]),t._v(" "),a("h3",{attrs:{id:"helm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helm"}},[t._v("#")]),t._v(" helm")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/devops/cloud/helm_101.html"}},[t._v("helm基础知识介绍")])],1),t._v(" "),a("h3",{attrs:{id:"operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator"}},[t._v("#")]),t._v(" operator")]),t._v(" "),a("p",[t._v("Operator 模式旨在捕获（正在管理一个或一组服务的）运维人员的关键目标。 负责特定应用和 service 的运维人员，在系统应该如何运行、如何部署以及出现问题时如何处理等方面有深入的了解。"),a("br"),t._v("\n在 Kubernetes 上运行工作负载的人们都喜欢通过自动化来处理重复的任务。 Operator 模式会封装你编写的（Kubernetes 本身提供功能以外的）任务自动化代码。")]),t._v(" "),a("h3",{attrs:{id:"k8s-cni-container-network-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s-cni-container-network-interface"}},[t._v("#")]),t._v(" k8s CNI(Container Network Interface)")]),t._v(" "),a("p",[t._v("k8s标准中一个调用网络实现的接口。用来调用CNI插件，比如Calico，Flannel, Teway, Weave Net以及Contiv。"),a("br"),t._v(" "),a("img",{attrs:{src:r(491),alt:"k8s CNI"}})]),t._v(" "),a("h4",{attrs:{id:"k8s如何调用cni"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s如何调用cni"}},[t._v("#")]),t._v(" k8s如何调用CNI")]),t._v(" "),a("p",[t._v("基本使用方法：")]),t._v(" "),a("ol",[a("li",[t._v("首先在每个结点上配置CNI配置文件(/etc/cni/net.d/xxnet.conf)")]),t._v(" "),a("li",[t._v("安装CNI配置文件中多对应的二进制插件")]),t._v(" "),a("li",[t._v("创建pod之后，kubelet就会根据CNI配置文件执行前两步所安装的CNI插件。")]),t._v(" "),a("li",[t._v("CNI插件进入pod的空间配置pod的网络。")])]),t._v(" "),a("h4",{attrs:{id:"cni插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cni插件"}},[t._v("#")]),t._v(" CNI插件")]),t._v(" "),a("p",[a("img",{attrs:{src:r(492),alt:"cni plugin pattern"}}),t._v("\n实现方式："),a("br"),t._v("\n通常来说CNI插件可以分为三种："),a("br"),t._v("\nOverlay、路由及Underlay。")]),t._v(" "),a("ul",[a("li",[t._v("Overlay模式："),a("br"),t._v("\n独立于主机的ip段，通过在主机之间建立隧道，好处不依赖底层网络，但是性能有损失。")]),t._v(" "),a("li",[t._v("路由模式："),a("br"),t._v("\n跨主机通信靠路由打通，但是需要依赖底层网络。")]),t._v(" "),a("li",[t._v("underlay模式："),a("br"),t._v("\n容器和宿主机在同一个网络，打通需要依赖底层网络。"),a("br"),t._v("\n许多underlay的插件不支持k8s的service服务发现。")])]),t._v(" "),a("p",[a("strong",[t._v("CNI plugins")]),a("br"),t._v("\nCNI plugin的二进制文件放在每个worker node的/opt/cni/bin/下面，每个插件有自己的二进制文件。"),a("br"),t._v("\n配置文件访问worker node的/etc/cni/net.d下。")]),t._v(" "),a("h4",{attrs:{id:"calico-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calico-插件"}},[t._v("#")]),t._v(" calico 插件")]),t._v(" "),a("p",[t._v("calico把每个host作为网关，用来路由workload的流量。"),a("br"),t._v("\ncalico使用IP 169.254.1.1作为路由。用来节省宝贵的IP资源。"),a("br"),t._v("\ncalico通过设置proxy_arp标志位在网卡上，使其可以对arp进行响应。"),a("br"),t._v("\ncalico可以有ipip tunnle模式和BGP模式两种路由模式。"),a("br"),t._v(" "),a("strong",[t._v("查看cluster的代理类型，可以在cluster node上执行命令"),a("code",[t._v("curl localhost:10249/proxyMode")])]),t._v("\niptables是一个有状态的防火墙。"),a("br"),t._v("\nMULTUS可以为pod提供多个网卡（或者叫网络接口），并作为多个CNI插件的仲裁者。"),a("br"),t._v(" "),a("strong",[t._v("网络规则")]),a("br"),t._v("\ncalico规定，没有网络规则，那么所有进出的流量都被允许。"),a("br"),t._v("\n如果有网络规则存在，那么只有符合网络规则的流量被允许。")]),t._v(" "),a("h3",{attrs:{id:"k8s创建工具-kubeadm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s创建工具-kubeadm"}},[t._v("#")]),t._v(" k8s创建工具---kubeadm")]),t._v(" "),a("h3",{attrs:{id:"service-account"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-account"}},[t._v("#")]),t._v(" service account")]),t._v(" "),a("p",[t._v("user accounts（普通账户）和service account（服务账号）的区别：")]),t._v(" "),a("ul",[a("li",[t._v("普通账户是针对个人用户的，服务账号是针对pod进程的")]),t._v(" "),a("li",[t._v("普通账户是全局性的，在集群所有namespace中名称唯一")]),t._v(" "),a("li",[t._v("服务账户相对普通账户更加轻量化，可以为特定任务创建服务账户。")]),t._v(" "),a("li",[t._v("复杂系统的配置包，可以包括对该系统各个组件的服务账户的定义"),a("br"),t._v("\n有三个不同的组件协作，来实现service account的自动化。")]),t._v(" "),a("li",[t._v("service account准入器（admission controller）")]),t._v(" "),a("li",[t._v("Token controller")]),t._v(" "),a("li",[t._v("service account controller")])]),t._v(" "),a("h4",{attrs:{id:"service-account-admission-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-account-admission-controller"}},[t._v("#")]),t._v(" service account admission controller")]),t._v(" "),a("p",[t._v("admission controller插件用来对pod进行修改，是apiserver的一部分。主要作用：")]),t._v(" "),a("ol",[a("li",[t._v("为pod设置service account")]),t._v(" "),a("li",[t._v("为pod提供ImagePullSecrets")]),t._v(" "),a("li",[t._v("为包含API访问的token的pod添加一个volume。把volumeSource添加到安装在pod的每个容器中，挂载在/var/run/secrets/kubernetes.io/serviceaccount")])]),t._v(" "),a("h4",{attrs:{id:"token-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token-controller"}},[t._v("#")]),t._v(" Token controller")]),t._v(" "),a("p",[t._v("Token controller作为controller的一部分运行。异步行为：")]),t._v(" "),a("ul",[a("li",[t._v("观察serviceAccount的创建，并创建一个相应的Secret来允许API的访问")]),t._v(" "),a("li",[t._v("观察serviceAccount的删除，并删除相应的serviceAccount Token Secret。")]),t._v(" "),a("li",[t._v("观察secret添加，并确保关联的ServiceAccount存在，并在需要时向secret中添加一个token。")]),t._v(" "),a("li",[t._v("观察secret删除，并在需要时对应ServiceAccount的关联。")])]),t._v(" "),a("h4",{attrs:{id:"service-account-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-account-controller"}},[t._v("#")]),t._v(" Service Account Controller")]),t._v(" "),a("p",[t._v("其在namspaces中管理service account，并确保每个有效的namespaces中都有一个defaul的serviceAccount。")]),t._v(" "),a("h3",{attrs:{id:"k8s日志架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s日志架构"}},[t._v("#")]),t._v(" k8s日志架构")]),t._v(" "),a("p",[t._v("Kubernetes 没有为日志数据提供原生存储方案，但是你可以集成许多现有的日志解决方案到 Kubernetes 集群中。")]),t._v(" "),a("h4",{attrs:{id:"节点级日志架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点级日志架构"}},[t._v("#")]),t._v(" 节点级日志架构")]),t._v(" "),a("h5",{attrs:{id:"容器日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器日志"}},[t._v("#")]),t._v(" 容器日志")]),t._v(" "),a("p",[t._v("容器化应用写入stdout和stderr的任何数据都会被容器引擎捕获并重定向到某个位置。")]),t._v(" "),a("h5",{attrs:{id:"系统组件日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统组件日志"}},[t._v("#")]),t._v(" 系统组件日志")]),t._v(" "),a("p",[t._v("系统组件有两种类型：在容器中运行的和不在容器中运行的。例如：")]),t._v(" "),a("ul",[a("li",[t._v("在容器中运行的 kube-scheduler 和 kube-proxy。")]),t._v(" "),a("li",[t._v("不在容器中运行的 kubelet 和容器运行时（例如 Docker）。")])]),t._v(" "),a("p",[t._v("在使用 systemd 机制的服务器上，kubelet 和容器 runtime 写入日志到 journald。 如果没有 systemd，他们写入日志到 /var/log 目录的 .log 文件。 容器中的系统组件通常将日志写到 /var/log 目录，绕过了默认的日志机制。他们使用 klog 日志库。 你可以在日志开发文档找到这些组件的日志告警级别协议。")]),t._v(" "),a("h4",{attrs:{id:"集群级日志架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群级日志架构"}},[t._v("#")]),t._v(" 集群级日志架构")]),t._v(" "),a("p",[t._v("一般有以下几个选项：")]),t._v(" "),a("ul",[a("li",[t._v("使用在每个节点上运行的节点级日志记录代理")]),t._v(" "),a("li",[t._v("在应用程序的pod中，包含专门记录日志的sidecar容器")]),t._v(" "),a("li",[t._v("将日志直接从应用程序中推送到日志记录的后端")])]),t._v(" "),a("h2",{attrs:{id:"ref参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref参考链接"}},[t._v("#")]),t._v(" ref参考链接")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.infoq.cn/article/EAH8zM3VH8MgwOt5Hokc",target:"_blank",rel:"noopener noreferrer"}},[t._v("infoQ CRI介绍"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://jiajunhuang.com/articles/2018_12_24-docker_components_part2.md.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker基本概念介绍"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.infoq.cn/article/te70FlSyxhltL1Cr7gzM",target:"_blank",rel:"noopener noreferrer"}},[t._v("从零开始入门 K8s"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.aliyun.com/article/745468",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes必备知识： pod网络模型"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.kubernetes.org.cn/kubernetes-pod",target:"_blank",rel:"noopener noreferrer"}},[t._v("pod概念介绍"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/cluster-administration/logging/",target:"_blank",rel:"noopener noreferrer"}},[t._v("k8s日志架构"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/",target:"_blank",rel:"noopener noreferrer"}},[t._v("operator"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);