(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{495:function(t,e,n){t.exports=n.p+"assets/img/MIT_6.824_lab_1_implementation.2cf4350b.png"},561:function(t,e,n){"use strict";n.r(e);var a=n(4),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("MIT6.824课程学习记录，第二部分MapReduce学习")])]),t._v(" "),a("h2",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("p",[t._v("长时间的在TB级别数据上的计算。"),a("br"),t._v("\n如 创建索引、排序、分析web结构")]),t._v(" "),a("h2",{attrs:{id:"lab-mr-map-reduce实验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lab-mr-map-reduce实验"}},[t._v("#")]),t._v(" lab-mr map reduce实验")]),t._v(" "),a("h3",{attrs:{id:"实验主要实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验主要实现"}},[t._v("#")]),t._v(" 实验主要实现")]),t._v(" "),a("p",[a("img",{attrs:{src:n(495),alt:"lab_1_implementation"}})]),t._v(" "),a("h3",{attrs:{id:"需要了解的golang基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要了解的golang基础"}},[t._v("#")]),t._v(" 需要了解的golang基础")]),t._v(" "),a("ul",[a("li",[t._v("golang基础包")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import (\n\t"fmt"\n\t"hash/fnv"\n\t"io/ioutil"\n\t"log"\n\t"net/rpc"\n\t"os"\n\t"sort"\n\t"strconv"\n\t"strings"\n\t"time"\n)\nimport (\n\t"container/list"\n\t"log"\n\t"math"\n\t"net"\n\t"net/http"\n\t"net/rpc"\n\t"os"\n\t"strconv"\n\t"sync"\n\t"time"\n)\n')])])]),a("ul",[a("li",[t._v("go class类相关知识"),a("br"),t._v("\ngo struct来代替class"),a("br"),t._v("\ngolang的函数定义形式："),a("code",[t._v("func (m *Master) getReduceTask(workerName string) (string, string")]),a("br"),t._v("\n变量定义形式："),a("code",[t._v("var filename string")]),a("br"),t._v("\ngolang没有隐式的构造函数，需要专门编写构造函数,如New()来初始化其属性值，或者使用内联的初始化函数。"),a("br"),t._v("\n内联初始化：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("objectA:=classA{\n  atrr1: 1,\n  attr2: 2,\n}\n")])])]),a("ul",[a("li",[t._v("go数组及集合相关知识\nlist的相关方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("list.New()\nPushFront()  \nPushBack()  \nLen()  \nFront()  \nElement.Next()  \nRemove()  \nElement.Value 返回的是interface{}类型，需要进行转换。  \narray数组相关方法  \n初始化数组， make(int[], size)  \n")])])]),a("ul",[a("li",[t._v("go锁相关知识")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("定义锁 reduceTaskLock sync.Mutex\nLock()  \nUnlock()  \ndefer的用法,在函数结束时执行,谨慎使用，可能会导致锁的范围扩大，性能下降  \n")])])]),a("ul",[a("li",[t._v("go文件读写")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("os.Create(file_name)  \nos.Open(file_name)  \nioutil.ReadAll(file_pointer)  \nfmt.Fprintf(file_pointer,fomart_string, value...)  \n")])])]),a("ul",[a("li",[t._v("go 基本数据类型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("int\nstring\nmap[string]string\ncontainer/list\n")])])]),a("ul",[a("li",[t._v("go的log机制")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("log.Printf()\nlog.Print()\n")])])]),a("ul",[a("li",[t._v("go的rpc机制"),a("br"),t._v("\n启动server")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func (m *Master) server() {\n\trpc.Register(m)\n\trpc.HandleHTTP()\n\tsockname := masterSock() //get socket name\n\tos.Remove(sockname)\n\tl, e := net.Listen("unix", sockname)\n\tif e != nil {\n\t\tlog.Fatal("listen error:", e)\n\t}\n\tgo http.Serve(l, nil)\n}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func call(rpcname string, args interface{}, reply interface{}) bool {\n\tsockname := masterSock()\n\tc, err := rpc.DialHTTP("unix", sockname)\n\tif err != nil {\n\t\tlog.Fatal("dialing:", err)\n\t}\n\tdefer c.Close()\n\n\terr = c.Call(rpcname, args, reply)\n\tif err == nil {\n\t\treturn true\n\t}\n\n\tfmt.Println(err)\n\treturn false\n}\n')])])]),a("ul",[a("li",[t._v("etc...")])])])}),[],!1,null,null,null);e.default=s.exports}}]);