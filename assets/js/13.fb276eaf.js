(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{485:function(a,t,e){a.exports=e.p+"assets/img/2020-05-05-10-19-47.2086cf4e.png"},526:function(a,t,e){"use strict";e.r(t);var s=e(4),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",[a._v("练手项目，使用java实现一个基础的json解析库。")])]),a._v(" "),s("h2",{attrs:{id:"如何写一个json解析库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何写一个json解析库"}},[a._v("#")]),a._v(" 如何写一个json解析库")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#如何写一个json解析库"}},[a._v("如何写一个json解析库")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-准备环境"}},[a._v("1. 准备环境")])]),s("li",[s("a",{attrs:{href:"#_2-辅助类准备"}},[a._v("2. 辅助类准备")])]),s("li",[s("a",{attrs:{href:"#_3-api设计"}},[a._v("3. API设计")])]),s("li",[s("a",{attrs:{href:"#_4-json语法子集"}},[a._v("4. JSON语法子集")])]),s("li",[s("a",{attrs:{href:"#额外功能"}},[a._v("额外功能")])]),s("li",[s("a",{attrs:{href:"#ref"}},[a._v("ref")])])])])])]),s("p"),a._v(" "),s("h3",{attrs:{id:"_1-准备环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-准备环境"}},[a._v("#")]),a._v(" 1. 准备环境")]),a._v(" "),s("p",[a._v("idea+testng")]),a._v(" "),s("h3",{attrs:{id:"_2-辅助类准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-辅助类准备"}},[a._v("#")]),a._v(" 2. 辅助类准备")]),a._v(" "),s("p",[a._v("准备数据类型enum和json数据结构"),s("br"),a._v("\njson数据拥有以下几种类型：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("  NULL,\n  FALSE,\n  TRUE,\n  NUMBER,\n  STRING,\n  ARRAY,\n  OBJECT\n")])])]),s("p",[a._v("Json的一个节点可以用如下表示：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class JsonNode {\n  DataType type;\n\n  public DataType getType() {\n      return type;\n  }\n\n  public void setType(DataType type) {\n      this.type = type;\n  }\n}\n")])])]),s("h3",{attrs:{id:"_3-api设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-api设计"}},[a._v("#")]),a._v(" 3. API设计")]),a._v(" "),s("p",[a._v("我们的供外部调用的API有两个：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public interface AsJson {\n  /**\n   * @param jsonNode root json node\n   * @param jsonStr json string to be parsed\n   * @return result code\n   */\n  int parse(JsonNode jsonNode, final String jsonStr);\n\n  /**\n   * @param jsonNode json data node\n   * @return the data type of this node\n   */\n  DataType get_type(final JsonNode jsonNode);\n}\n")])])]),s("h3",{attrs:{id:"_4-json语法子集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-json语法子集"}},[a._v("#")]),a._v(" 4. JSON语法子集")]),a._v(" "),s("h4",{attrs:{id:"第一步：解析含有null-false-true的字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步：解析含有null-false-true的字符串"}},[a._v("#")]),a._v(" 第一步：解析含有null/false/true的字符串")]),a._v(" "),s("p",[a._v("使用RFC7159的ABNF表示：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('JSON-text = ws value ws\nws = *(%x20 / %x09 / %x0A / %x0D)\nvalue = null / false / true \nnull  = "null"\nfalse = "false"\ntrue  = "true"\n')])])]),s("p",[a._v("JSON文本由三部分组成，空白（ws），一个值，加一个空白（ws）。"),s("br"),a._v("\n第二行表示空白可以为（多个空格，制表符、换行符、回车符）"),s("br"),a._v("\n现有值只有null或false或true"),s("br"),a._v("\n先根据标准，编写测试用例，再编写代码。")]),a._v(" "),s("h4",{attrs:{id:"第二步：支持数字类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步：支持数字类型"}},[a._v("#")]),a._v(" 第二步：支持数字类型")]),a._v(" "),s("p",[a._v("语法：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('number = [ "-" ] int [ frac ] [ exp ]\nint = "0" / digit1-9 *digit\nfrac = "." 1*digit\nexp = ("e" / "E") ["-" / "+"] 1*digit\n')])])]),s("p",[a._v("JSON 标准 ECMA-404 采用图的形式表示语法，也可以更直观地看到解析时可能经过的路径："),s("br"),a._v(" "),s("img",{attrs:{src:e(485),alt:"解析路径"}}),s("br"),a._v("\n使用双精度浮点数来存储数字。")]),a._v(" "),s("h4",{attrs:{id:"第三步：支持字符串解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步：支持字符串解析"}},[a._v("#")]),a._v(" 第三步：支持字符串解析")]),a._v(" "),s("p",[a._v("语法：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('string = quotation-mark *char quotation-mark\nchar = unescaped /\n escape (\n     %x22 /          ; "    quotation mark  U+0022\n     %x5C /          ; \\    reverse solidus U+005C\n     %x2F /          ; /    solidus         U+002F\n     %x62 /          ; b    backspace       U+0008\n     %x66 /          ; f    form feed       U+000C\n     %x6E /          ; n    line feed       U+000A\n     %x72 /          ; r    carriage return U+000D\n     %x74 /          ; t    tab             U+0009\n     %x75 4HEXDIG )  ; uXXXX                U+XXXX\nescape = %x5C          ; \\\nquotation-mark = %x22  ; "\nunescaped = %x20-21 / %x23-5B / %x5D-10FFFF\n')])])]),s("h4",{attrs:{id:"第四步：支持unicode解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四步：支持unicode解析"}},[a._v("#")]),a._v(" 第四步：支持Unicode解析")]),a._v(" "),s("p",[a._v("这些字符被收录为统一字符集（Universal Coded Character Set, UCS），每个字符映射至一个整数码点（code point），码点的范围是 0 至 0x10FFFF，码点又通常记作 U+XXXX，当中 XXXX 为 16 进位数字。"),s("br"),a._v("\n因此，Unicode 还制定了各种储存码点的方式，这些方式称为 Unicode 转换格式（Uniform Transformation Format, UTF）。现时流行的 UTF 为 UTF-8、UTF-16 和 UTF-32。每种 UTF 会把一个码点储存为一至多个编码单元（code unit）。例如 UTF-8 的编码单元是 8 位的字节、UTF-16 为 16 位、UTF-32 为 32 位。除 UTF-32 外，UTF-8 和 UTF-16 都是可变长度编码。"),s("br"),a._v("\n我们的JSON库只支持UTF-8.")]),a._v(" "),s("p",[a._v("第四步：支持数组\n数组的语法：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("array = %x5B ws [ value *( ws %x2C ws value ) ] ws %x5D\n")])])]),s("p",[a._v("%x5B为[, %x5D为]"),s("br"),a._v("\n重难点在于内存管理：")]),a._v(" "),s("ol",[s("li",[a._v("使用链表来存储数组结构")]),a._v(" "),s("li",[a._v("递归解析数组单个数据")])]),a._v(" "),s("h4",{attrs:{id:"第五步：-解析对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五步：-解析对象"}},[a._v("#")]),a._v(" 第五步： 解析对象")]),a._v(" "),s("p",[a._v("可以使用动态数组，有序动态数组，平衡树，哈希表。"),s("br"),a._v("\nJSON 对象以花括号 {}（U+007B、U+007D）包裹表示，另外 JSON 对象由对象成员（member）组成，而 JSON 数组由 JSON 值组成。所谓对象成员，就是键值对，键必须为 JSON 字符串，然后值是任何 JSON 值，中间以冒号 :（U+003A）分隔。完整语法如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("member = string ws %x3A ws value\nobject = %x7B ws [ member *( ws %x2C ws member ) ] ws %x7D\n")])])]),s("p",[a._v("对象解析与数组解析类似，不同之处只是需要解析key和value两类值。"),s("br"),a._v("\n解析key可以复用之前的解析")]),a._v(" "),s("h4",{attrs:{id:"第六步：生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六步：生成器"}},[a._v("#")]),a._v(" 第六步：生成器")]),a._v(" "),s("p",[a._v("生成器就是将解析成jsonNode的json数据重新生成为字符串的过程。"),s("br"),a._v("\n这个过程比较简单，一般不会出现错误。")]),a._v(" "),s("h3",{attrs:{id:"额外功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#额外功能"}},[a._v("#")]),a._v(" 额外功能")]),a._v(" "),s("ol",[s("li",[a._v("对象键值查询")]),a._v(" "),s("li",[a._v("相等比较")]),a._v(" "),s("li",[a._v("复制、移动、交换")])]),a._v(" "),s("h3",{attrs:{id:"ref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[a._v("#")]),a._v(" ref")]),a._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/22460835",target:"_blank",rel:"noopener noreferrer"}},[a._v("从零开始的 JSON 库教程"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://tools.ietf.org/html/rfc5234",target:"_blank",rel:"noopener noreferrer"}},[a._v("ABNF 表示"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);