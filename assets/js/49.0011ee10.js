(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{536:function(t,e,a){"use strict";a.r(e);var i=a(4),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("git学习过程中碰到的小技巧")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#git-多用户配置"}},[t._v("git 多用户配置")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-为项目单独设置用户名和邮箱"}},[t._v("1. 为项目单独设置用户名和邮箱")])]),a("li",[a("a",{attrs:{href:"#_2-配置ssh"}},[t._v("2. 配置ssh")])]),a("li",[a("a",{attrs:{href:"#_3-修改git的配置"}},[t._v("3. 修改git的配置")])])])]),a("li",[a("a",{attrs:{href:"#git-ignore忽略文件"}},[t._v("git ignore忽略文件")]),a("ul",[a("li",[a("a",{attrs:{href:"#忽略文件的优先级"}},[t._v("忽略文件的优先级")])]),a("li",[a("a",{attrs:{href:"#忽略文件的模式"}},[t._v("忽略文件的模式")])]),a("li",[a("a",{attrs:{href:"#查看当前使用的文件"}},[t._v("查看当前使用的文件")])])])]),a("li",[a("a",{attrs:{href:"#删除github所有历史记录"}},[t._v("删除github所有历史记录")])]),a("li",[a("a",{attrs:{href:"#git放弃本地修改，强制拉取更新"}},[t._v("git放弃本地修改，强制拉取更新")])]),a("li",[a("a",{attrs:{href:"#压缩git-commit"}},[t._v("压缩git commit")])]),a("li",[a("a",{attrs:{href:"#参考链接："}},[t._v("参考链接：")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"git-多用户配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-多用户配置"}},[t._v("#")]),t._v(" git 多用户配置")]),t._v(" "),a("p",[t._v("我们在开发的时候可能会碰到要在一个主机上使用多个git用户的情况，如果不进行配置，会出现冲突等问题。"),a("br"),t._v("\n简单办法：\n在你的shell文件中添加alias。\n如 .bashrc,增加使用指定ssh key：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("alias mgit='GIT_SSH_COMMAND=\"ssh -i ~/.ssh/id_rsa_personal\" git push -u origin master'\n")])])]),a("p",[t._v("还可以使用为git仓库设置专门的用户和邮箱，然后配置ssh config。")]),t._v(" "),a("h3",{attrs:{id:"_1-为项目单独设置用户名和邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为项目单独设置用户名和邮箱"}},[t._v("#")]),t._v(" 1. 为项目单独设置用户名和邮箱")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    git config user.name "A"\n    git config user.email "A@hotmail.com"\n')])])]),a("h3",{attrs:{id:"_2-配置ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置ssh"}},[t._v("#")]),t._v(" 2. 配置ssh")]),t._v(" "),a("p",[t._v("编辑文件~/.ssh/config")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Host personal.github.com\n  Hostname github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_personal\n  User git\n")])])]),a("p",[t._v("其中Host为git地址别名，Hostname为真实地址，PreferredAuthentications为强制使用的验证方式，IdentityFile为使用的rsa key文件，User为用户名。")]),t._v(" "),a("h3",{attrs:{id:"_3-修改git的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改git的配置"}},[t._v("#")]),t._v(" 3. 修改git的配置")]),t._v(" "),a("p",[t._v('修改你本地仓库目录下.git/config文件中的remote "origin"为别名地址，即替换github.com这段为我们的personal.github.com。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[remote "origin"]\n        url = git@personal.github.com:evoToBetter/Blog.git\n')])])]),a("h2",{attrs:{id:"git-ignore忽略文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-ignore忽略文件"}},[t._v("#")]),t._v(" git ignore忽略文件")]),t._v(" "),a("h3",{attrs:{id:"忽略文件的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件的优先级"}},[t._v("#")]),t._v(" 忽略文件的优先级")]),t._v(" "),a("p",[t._v("git ignore是用于忽略某些文件，使git不会跟踪它的变化的文件"),a("br"),t._v("\ngit ignore会从多个来源读取文件，按优先级从高到低排列为：")]),t._v(" "),a("ul",[a("li",[t._v("从命令行读取到的文件匹配模式")]),t._v(" "),a("li",[t._v("从.gitignore文件中读取的文件匹配模式，这些.gitignore文件存在于工作目录及其子目录下，上层目录的配置会被下层目录覆盖。匹配模式的路径会与这些.gitignore文件的位置相关")]),t._v(" "),a("li",[t._v("从$GIT_DIR/info/exclude中读取的文件匹配模式")]),t._v(" "),a("li",[t._v("在core.excludesFile中配置的文件中读取到的文件匹配模式")])]),t._v(" "),a("h3",{attrs:{id:"忽略文件的模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件的模式"}},[t._v("#")]),t._v(" 忽略文件的模式")]),t._v(" "),a("ul",[a("li",[t._v("空行不匹配任何文件")]),t._v(" "),a("li",[t._v("以#开头的为注释，需要使用"),a("code",[t._v("\\")]),t._v("加在"),a("code",[t._v("#")]),t._v("前面才能表示一个井号。")]),t._v(" "),a("li",[t._v("尾部的空格会被忽略，除非有"),a("code",[t._v("\\")]),t._v("转义。")]),t._v(" "),a("li",[a("code",[t._v("!")]),t._v("可以用来对匹配模式取反，之前被排除的文件，可以被取反重新包含进来。如果父文件夹被排除，那么不能把文件夹中的文件重新包含进来。git由于性能考虑，并不会列出被排除的文件中的文件，所以在被包含的文件上的任何匹配模式都无效。可以在前面使用转义字符"),a("code",[t._v("\\")]),t._v("来表示一个叹号。")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v(".gitignore")]),t._v("中"),a("code",[t._v("/")]),t._v("表示文件夹分隔。")]),t._v(" "),a("li",[t._v("如果在文件匹配模式开头和中间出现了"),a("code",[t._v("/")]),t._v("表示，其是一个相对"),a("code",[t._v(".gitignore")]),t._v("的路径，而没有的话，那么他匹配的是"),a("code",[t._v(".gitignore")]),t._v("相对路径下的每一个文件或文件夹。")]),t._v(" "),a("li",[t._v("匹配模式尾部有"),a("code",[t._v("/")]),t._v("表示匹配文件夹，否则会匹配文件和文件夹。")]),t._v(" "),a("li",[t._v("比如"),a("code",[t._v("docs/public")]),t._v("会匹配文件夹"),a("code",[t._v("docs/public")]),t._v("，但是不会匹配"),a("code",[t._v("a/docs/public")]),t._v("。但是"),a("code",[t._v("public/")]),t._v("会匹配文件夹"),a("code",[t._v("public/")]),t._v("和"),a("code",[t._v("a/public/")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("*")]),t._v("表示除了"),a("code",[t._v("/")]),t._v("的任意字符，"),a("code",[t._v("?")]),t._v("类似，但是只匹配一个字符。"),a("code",[t._v("[]")]),t._v("表示范围，如"),a("code",[t._v("[A-Z]")]),t._v("匹配任意一个大写字符。")]),t._v(" "),a("li",[t._v("双星号"),a("code",[t._v("**")]),t._v("有很多用法，头部的双星号加上右斜线表示任意文件夹，如"),a("code",[t._v("**/public")]),t._v("。而尾部的则表示所有包含在内的，如"),a("code",[t._v("public/**")]),t._v("。在中间的双星号，匹配任意零到多个文件夹，如"),a("code",[t._v("public/**/private")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"查看当前使用的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前使用的文件"}},[t._v("#")]),t._v(" 查看当前使用的文件")]),t._v(" "),a("p",[a("code",[t._v("git ls-files")])]),t._v(" "),a("h2",{attrs:{id:"删除github所有历史记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除github所有历史记录"}},[t._v("#")]),t._v(" 删除github所有历史记录")]),t._v(" "),a("ol",[a("li",[t._v("Checkout一个新的分支")])]),t._v(" "),a("p",[a("code",[t._v("git checkout --orphan latest_branch")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("将所有文件加入到这个分支")])]),t._v(" "),a("p",[a("code",[t._v("git add -A")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("添加commit信息，commit文件")])]),t._v(" "),a("p",[a("code",[t._v('git commit -am "commit message"')])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("删除原有master分支")])]),t._v(" "),a("p",[a("code",[t._v("git branch -D master")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("把当前分支重命名为master")])]),t._v(" "),a("p",[a("code",[t._v("git branch -m master")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("强制将本地master分支push上去即可")])]),t._v(" "),a("p",[a("code",[t._v("git push -f origin master")])]),t._v(" "),a("h2",{attrs:{id:"git放弃本地修改，强制拉取更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git放弃本地修改，强制拉取更新"}},[t._v("#")]),t._v(" git放弃本地修改，强制拉取更新")]),t._v(" "),a("p",[t._v("有时候我们需要放弃本地修改，拉取最新远程更新，但是有不想另外开新的一个本地repo(比如本地安装了nodejs包，不想重新安装)，那么就可以这么操作。")]),t._v(" "),a("ol",[a("li",[t._v("拉取远程最新的内容")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git fetch --all\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("强制将HEAD指向最新版本")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset --hard origin/master\n")])])]),a("h2",{attrs:{id:"压缩git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩git-commit"}},[t._v("#")]),t._v(" 压缩git commit")]),t._v(" "),a("p",[t._v("可以使用"),a("code",[t._v("git rebase")]),t._v("来实现，其实压缩commit就是利用rebase把多个commit合并到一个commit里面。\n具体步骤：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git log")]),t._v("确认需要合并的commit和基础commit的id。")]),t._v(" "),a("li",[a("code",[t._v("git rebase -i <base commit id>")]),t._v("使用rebase，base commit id为需要压缩的所有commit的前一个commit的id。比如依次有a,b,c三个commit，合并b和c的时候，需要"),a("code",[t._v("git rebase -i a")]),t._v("。")]),t._v(" "),a("li",[t._v("编辑commit，可以通过指定"),a("code",[t._v("squash")]),t._v("来将其合入之前的commit。比如上面的a,b,c可以将c标记为"),a("code",[t._v("squash")]),t._v(",将b标记为"),a("code",[t._v("pick")]),t._v("，这样就把c合入b了。")]),t._v(" "),a("li",[t._v("编辑commit信息")]),t._v(" "),a("li",[t._v("结束")])]),t._v(" "),a("h2",{attrs:{id:"参考链接："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接："}},[t._v("#")]),t._v(" 参考链接：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Multiple github accounts on the same computer?"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://medium.com/@geeky_sh/manage-multiple-git-accounts-on-a-single-machine-d49d710ec229",target:"_blank",rel:"noopener noreferrer"}},[t._v("Manage multiple GIT accounts on a single machine"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.hi-linux.com/posts/14346.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("利用 SSH 的用户配置文件 Config 管理 SSH 会话"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitignore"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/13716658/how-to-delete-all-commit-history-in-github",target:"_blank",rel:"noopener noreferrer"}},[t._v("how to delete all commit history in github?\n"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);